import os
from tkinter import messagebox

class ModelsHandler:
    """
    A class to handle operations related to Django models.py file.
    """

    def __init__(self, app_gui):
        """
        Initialize the ModelsHandler.

        Args:
            app_gui: The main application GUI object.
        """
        self.app_gui = app_gui

    def models_prompt(self):
        """
        Generate a prompt for GPT to optimize models.py.

        This method is triggered when models.py is selected. It checks for models.py,
        reads its content, and prepares a prompt for GPT to optimize the code.

        Returns:
            list: A list of dictionaries containing the prompt for GPT.
        """
        project_directory = self.app_gui.file_browser.root_dir
        models_file = os.path.join(project_directory, "backend/LabManagement/models.py")
        # Read the content of models.py to provide context to GPT
        with open(models_file, "r") as models:
            models_content = models.read()

        prompt = [
            {
                "role": "system", 
                "content": f"You are a code assistant. You are helping me writing models.py script in the django framework. "
                           f"You will be provided with existing models.py code (delimited with XML tags). "
                           f"First, review the existing code, and understand the requirements generated by users. "
                           f"Then modify the code step by step to meet the requirements. "
                           f"Finally, generate the entire models.py code."
            },
            {
                "role": "user", 
                "content":  f"<existing_models_py_code>" 
                            f"{models_content}\n"
                            f"</existing_models_py_code>\n"
                            f"Optimize current models.py with following requirements:\n"
            }
        ]

        return prompt
    
    def finalize_modelspy(self):
        """
        Finalize the generated models.py code.

        This method prompts the user to confirm if they want to paste the generated
        models.py code into the selected file. If confirmed, it reads the generated
        code from a review file and writes it to the selected file.
        """
        confirm = messagebox.askyesno("Finalize", "Do you want to paste the generated models.py into the selected file?")
        if confirm:
            selected_file_path = os.path.join(self.app_gui.file_browser.current_dir, self.app_gui.current_selection)

            review_file_path = os.path.join(self.app_gui.file_browser.root_dir, "review_models.py")
            # Read from the appropriate review file and write to the selected file

            try:
                with open(review_file_path, "r") as review_file:
                    generated_code = review_file.read()

                with open(selected_file_path, "w") as selected_file:
                    selected_file.write(generated_code)

                messagebox.showinfo("Success", f"Code has been pasted into {self.app_gui.current_selection}!")

            except FileNotFoundError:
                messagebox.showerror("Error", f"Review file review_models.py not found. Please generate code first.")